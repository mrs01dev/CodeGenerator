using System;
using System.Linq;
using System.Linq.Dynamic.Core;
using Abp.Linq.Extensions;
using System.Collections.Generic;
using System.Threading.Tasks;
using Abp.Domain.Repositories;
using {{Namespace_Here}}.{{Namespace_Relative_Full_Here}}s.Dtos;
using Abp.Application.Services.Dto;
using {{Namespace_Here}}.Authorization;
using Abp.Authorization;
using Microsoft.EntityFrameworkCore;
using Abp.Extensions;

//using {{Namespace_Here}}.Dto;
//using {{Namespace_Here}}.{{Namespace_Relative_Full_Here}}s.Exporting;
//using {{Namespace_Here}}.{{Namespace_Relative_Full_Here}}s.Entities;

namespace {{Namespace_Here}}.{{Namespace_Relative_Full_Here}}s
{
	[AbpAuthorize(PermissionNames.{{Permission_Name_Here}})] 
    public partial class {{Entity_Name_Plural_Here}}AppService : {{Application_AppServiceBase}}, I{{Entity_Name_Plural_Here}}AppService
    {
		 private readonly IRepository<{{Entity_Name_Here}},{{Primary_Key_With_Comma_Here}}> _{{entity_Name_Here}}Repository;
		 //private readonly I{{Entity_Name_Here}}ListExcelExporter _{{entity_Name_Here}}ListExcelExporter;
		  public {{Entity_Name_Plural_Here}}AppService(
				IRepository<{{Entity_Name_Here}},{{Primary_Key_With_Comma_Here}}> {{entity_Name_Here}}Repository			
			) :base()
		  {
			_{{entity_Name_Here}}Repository = {{entity_Name_Here}}Repository;			
		  }

		private IQueryable<{{Entity_Name_Here}}> Create{{Entity_Name_Here}}Query(Get{{Entity_Name_Here}}Input input)
        {
            var query = from {{entity_Name_Here}} in _{{entity_Name_Here}}Repository.GetAll()
                select {{entity_Name_Here}};

            query = query
                .WhereIf(!input.Filter.IsNullOrWhiteSpace(), item => item.<<ChangeThisPropertyField>>.Contains(input.Filter));
            return query;
        }

		 public async Task<PagedResultDto<{{Entity_Name_Here}}Dto>> GetAll(Get{{Entity_Name_Here}}Input input)
         {

			var query = Create{{Entity_Name_Here}}Query(input);

            var resultCount = await query.CountAsync();
            var results = await query
                .OrderBy(input.Sorting)
                .PageBy(input)
                .ToListAsync();

            var {{entity_Name_Here}}Dtos =  ObjectMapper.Map<List<{{Entity_Name_Here}}Dto>>(results);

            return new PagedResultDto<{{Entity_Name_Here}}Dto>(resultCount, {{entity_Name_Here}}Dtos);
         }
		 
		 [AbpAuthorize(PermissionNames.{{Permission_Name_Here}}_Edit)]
		 public async Task<Get{{Entity_Name_Here}}ForEditOutput> Get{{Entity_Name_Here}}ForEdit(EntityDto<{{Primary_Key_Inside_Tag_Here}}> input)
         {
            var {{entity_Name_Here}} = await _{{entity_Name_Here}}Repository.FirstOrDefaultAsync(input.Id);
            var output = new Get{{Entity_Name_Here}}ForEditOutput {{{Entity_Name_Here}} = ObjectMapper.Map<CreateOrEdit{{Entity_Name_Here}}Input>({{entity_Name_Here}})};

			
            return output;
         }

		 public async Task CreateOrEdit(CreateOrEdit{{Entity_Name_Here}}Input input)
         {
            if(input.Id == null){
				await Create(input);
			}
			else{
				await Update(input);
			}
         }

		 [AbpAuthorize(PermissionNames.{{Permission_Name_Here}}_Create)]
		 private async Task Create(CreateOrEdit{{Entity_Name_Here}}Input input)
         {
            var {{entity_Name_Here}} = ObjectMapper.Map<{{Entity_Name_Here}}>(input);


            await _{{entity_Name_Here}}Repository.InsertAsync({{entity_Name_Here}});
         }

		 [AbpAuthorize(PermissionNames.{{Permission_Name_Here}}_Edit)]
		 private async Task Update(CreateOrEdit{{Entity_Name_Here}}Input input)
         {
            var {{entity_Name_Here}} = await _{{entity_Name_Here}}Repository.FirstOrDefaultAsync(input.Id.Value);
             ObjectMapper.Map(input, {{entity_Name_Here}});
         }

		 [AbpAuthorize(PermissionNames.{{Permission_Name_Here}}_Delete)]
         public async Task Delete(EntityDto<{{Primary_Key_Inside_Tag_Here}}> input)
         {
            await _{{entity_Name_Here}}Repository.DeleteAsync(input.Id);
         }
  

    }
}